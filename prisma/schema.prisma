// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======= ENUMS =======
enum DashboardRole {
  ADMIN
  SECRETARY
  KITCHEN
}

enum RequestStatus {
  PENDING_SUPERVISOR
  REJECTED_SUPERVISOR
  PENDING_GA
  REJECTED_GA
  PENDING_KITCHEN
  REJECTED_KITCHEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MenuCategory {
  HEAVY_MEAL
  SNACK
}

enum ServiceType {
  MEAL
  TRANSPORT
  ROOM
  STATIONARY
}

enum ApprovalType {
  SUPERVISOR
  GA
  KITCHEN
}

// Updated Employee model
model Employee {
  id        String   @id @default(cuid())
  nip       String   @unique
  nama      String
  jabatan   String
  bagian    String
  subBidang String
  email     String?  @unique
  nomorHp   String?
  isAsman   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ======= USER MANAGEMENT =======
model DashboardUser {
  id        String        @id @default(cuid())
  username  String        @unique
  email     String        @unique
  password  String
  name      String
  avatar    String        @default("avatar.jpg")
  role      DashboardRole
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  requestsHandled ServiceRequest[] @relation("Handler")
}

// ======= MENU MANAGEMENT =======
model MenuItem {
  id          String       @id @default(cuid())
  name        String
  category    MenuCategory
  isAvailable Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  orderItems OrderItem[]
}

// ======= REQUEST MANAGEMENT =======
model ServiceRequest {
  id             String        @id @default(cuid())
  judulPekerjaan String
  type           ServiceType   @default(MEAL)
  status         RequestStatus @default(PENDING_SUPERVISOR)
  requestDate    DateTime
  requiredDate   DateTime
  dropPoint      String
  supervisor     Json
  pic            Json
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  handlerId String?
  handler   DashboardUser? @relation("Handler", fields: [handlerId], references: [id])

  approvalLinks  ApprovalLink[]
  employeeOrders EmployeeOrder[]
  statusHistory  StatusHistory[]
}

model EmployeeOrder {
  id           String         @id @default(cuid())
  requestId    String
  request      ServiceRequest @relation(fields: [requestId], references: [id])
  employeeName String
  entity       String?

  // Relations
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id              String        @id @default(cuid())
  employeeOrderId String
  employeeOrder   EmployeeOrder @relation(fields: [employeeOrderId], references: [id])
  menuItemId      String
  menuItem        MenuItem      @relation(fields: [menuItemId], references: [id])
  quantity        Int
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Simplified ApprovalLink model
model ApprovalLink {
  id           String         @id @default(cuid())
  token        String         @unique
  type         ApprovalType
  requestId    String
  request      ServiceRequest @relation(fields: [requestId], references: [id])
  isUsed       Boolean        @default(false)
  response     Boolean? // true for approve, false for reject
  responseNote String?
  expiresAt    DateTime
  createdAt    DateTime       @default(now())
  respondedAt  DateTime?

  @@index([requestId])
}

model StatusHistory {
  id        String         @id @default(cuid())
  requestId String
  request   ServiceRequest @relation(fields: [requestId], references: [id])
  status    RequestStatus
  changedBy String
  notes     String?
  createdAt DateTime       @default(now())

  @@index([requestId])
}
